/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/Clip/GetClipsByGame": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    gameId?: string;
                    startDate?: string;
                    endDate?: string;
                    dateType?: components["schemas"]["DateType"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["SavedClip"][];
                        "application/json": components["schemas"]["SavedClip"][];
                        "text/json": components["schemas"]["SavedClip"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Clip/GetAllClipsByGame": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    gameId?: string;
                    startDate?: string;
                    endDate?: string;
                    dateType?: components["schemas"]["DateType"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["SavedClip"][];
                        "application/json": components["schemas"]["SavedClip"][];
                        "text/json": components["schemas"]["SavedClip"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/SavedClip": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    pageIndex?: number;
                    pageSize?: number;
                    orderType?: components["schemas"]["OrderType"];
                    orderBy?: components["schemas"]["OrderBy"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["SavedClip"][];
                        "application/json": components["schemas"]["SavedClip"][];
                        "text/json": components["schemas"]["SavedClip"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/SavedClip/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["SavedClip"];
                        "application/json": components["schemas"]["SavedClip"];
                        "text/json": components["schemas"]["SavedClip"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    searchValue?: string;
                    searchType?: components["schemas"]["SearchFlags"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["SearchResponse"];
                        "application/json": components["schemas"]["SearchResponse"];
                        "text/json": components["schemas"]["SearchResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Channel: {
            readonly gameId?: string | null;
            readonly gameName?: string | null;
            readonly id?: string | null;
            readonly broadcasterLogin?: string | null;
            readonly displayName?: string | null;
            readonly broadcasterLanguage?: string | null;
            readonly title?: string | null;
            readonly thumbnailUrl?: string | null;
            readonly isLive?: boolean;
            /** Format: date-time */
            readonly startedAt?: string | null;
            readonly tagIds?: string[] | null;
            readonly tags?: string[] | null;
        };
        /** @enum {string} */
        DateType: "Today" | "Week" | "Month" | "Year" | "FiveYears" | "AllTime";
        Game: {
            readonly id?: string | null;
            readonly name?: string | null;
            readonly boxArtUrl?: string | null;
            readonly igdbId?: string | null;
        };
        /** @enum {string} */
        OrderBy: "Views" | "Time";
        /** @enum {string} */
        OrderType: "Descending" | "Ascending";
        SavedClip: {
            id: string | null;
            url: string | null;
            embedUrl: string | null;
            broadcasterId: string | null;
            broadcasterName: string | null;
            creatorId: string | null;
            creatorName: string | null;
            gameId: string | null;
            language: string | null;
            title: string | null;
            /** Format: int32 */
            viewCount?: number;
            /** Format: date-time */
            createdAt: string;
            thumbnailUrl: string | null;
            /** Format: float */
            duration?: number;
        };
        /** @enum {string} */
        SearchFlags: "Channel" | "Category" | "All";
        SearchResponse: {
            channels?: components["schemas"]["Channel"][] | null;
            games?: components["schemas"]["Game"][] | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
